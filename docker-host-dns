#!/bin/bash
#
# --------------------------------------------------------------
# A script that monitors docker start/stop events and
# adds/removes containers' IP address to/from
# /etc/hosts so that they can be automatically addressed by their
# hostnames.
#
# Has to be run as root
# --------------------------------------------------------------
#

#set -x
set -e

function detectEngine {
  _fail=false
  _engine_version=$(docker --version || echo "N/A")
  _supported="Currently supported engines are Docker (Community Edition) and Podman (with podman-docker)."

  if [[ ${_engine_version,,} =~ docker ]]; then
    _engine=docker
    _podman=false
  elif [[ ${_engine_version,,} =~ podman ]]; then
    _engine=podman
    _podman=true
  elif [[ $_engine_version == "N/A" ]]; then
    printf "No container engine detected. %s Quiting...\n" "$_supported"
    _fail=true
  else
    printf "Unsuported container engine %s detected. %s Quiting...\n" "$(echo "$_engine_version" | cut -d' ' -f1)" "$_supported"
    _fail=true
  fi
}

function listenDockerEvents {
  while read -r event; do
    if $_podman; then
      _etype=$(echo "$event" | jq -r ".Status")
      cid=$(echo "$event" | jq -r ".ID")
      _cid=${cid:0:12}
      _cname=$(echo "$event" | jq -r ".Name")
    else
      _etype=$(echo "$event" | jq -r ".status")
      cid=$(echo "$event" | jq -r ".id")
      _cid=${cid:0:12}
      _cname=$(echo "$event" | jq -r ".Actor.Attributes.name")
    fi

    if [[ "$_etype" == "start" ]]; then
      getCIPByCID "$_cid"
      addHost "$_cid" "$_cname" "$_cip"
    elif [[ "$_etype" == "stop" || "$_etype" == "died" ]]; then
      removeHostByCID "$_cid"
    fi
  done < <(docker events --filter event=start --filter event=died --filter event=stop --format '{{json .}}')
}

function addHost() {
  if [ "$#" != "3" ]; then
    echo "Usage: addHost <container_id> <container_name> <container_ip>" >&2
  fi
  grep -q "\s$2$" "$_hosts_file" && {
    _ccid=$(grep "$_cname" "$_hosts_file" | cut -f2 | cut -d" " -f1)
    if [[ $_ccid != "$1" ]]; then
      removeHostByCID "$_ccid"
    fi
  }
  _cid="$1"
  _cname="$2"
  _cip="$3"
  _hostnames="$_cid $_cname"
  _line="$_cip$(printf '\t')$_hostnames"

  if grep -q "$_cid" "$_hosts_file"; then
    current=$(grep "$_hostnames" "$_hosts_file")
    if [[ "$current" != "$_line" ]]; then
      sed -i "s/.*$_hostnames/$_line/" "$_hosts_file"
      printf "\u21BB %s (%s) -> %s\n" "$_cid" "$_cname" "$_cip"
    else
      printf "= %s (%s) -> %s\n" "$_cid" "$_cname" "$_cip"
    fi
  else
    echo -e "$_line" >>"$_hosts_file"
    printf "+ %s (%s) -> %s\n" "$_cid" "$_cname" "$_cip"
  fi
}

function removeHostByCID() {
  if [ "$#" != "1" ]; then
    echo "Usage: removeHostByCID <container_id>" >&2
  fi
  _cid="$1"
  grep -q "$_cid" "$_hosts_file" && {
    _lines=$(grep "$_cid" "$_hosts_file")
    if [[ $(grep -c . <<<"$(grep "$_cid" "$_hosts_file")") -gt 1 ]]; then
      # shellcheck disable=2001
      printf "Ambiguity detected. More than one hosts entry for %s:\n%s\nSkipping...\n" \
        "$_cid" "$(echo "$_lines" | sed 's/.*/\t&/')" >&2
    else
      _line=$_lines
      _hnames=$(echo "$_line" | cut -f2)
      _cname=$(echo "$_hnames" | cut -d" " -f2)
      _cip=$(echo "$_line" | cut -f1)
      sed -i "/$_cid/d" "$_hosts_file" && printf "\055 %s (%s) -> %s\n" "$_cid" "$_cname" "$_cip"
    fi
  } || printf "! %s\n" "$_cid"
}

function getCIPByCID() {
  if [ "$#" != "1" ]; then
    echo "Usage: getCIPByCID <container_id>" >&2
  fi
  _cip="$(docker inspect --format '{{ range .NetworkSettings.Networks}}{{.IPAddress}} {{end}}' "$1" | cut -d" " -f1)"
}

function addAllHosts() {
  while read -r c; do
    _cid=$(echo "$c" | cut -f1)
    _cname=$(echo "$c" | cut -f2)
    getCIPByCID "$_cid"
    addHost "$_cid" "$_cname" "$_cip"
  done < <(docker ps -q --format "{{.ID}}\t{{.Names}}")
}

function removeAllHosts() {
  while read -r _cid; do
    removeHostByCID "$_cid"
  done < <(docker ps -aq)
}

function testAddHost {
  _cid="ec89b7a8e6af"
  _cname="test"
  _cip="172.17.0.3"
  addHost $_cid $_cname $_cip
}

function testUpdateExistingHost {
  _cid="ec89b7a8e6af"
  _cname="test"
  _cip="172.17.0.4"
  addHost $_cid $_cname $_cip
}

function testRemoveHostByCID {
  _cid="ec89b7a8e6af"
  removeHostByCID $_cid
}

function _exit() {
  while read -r sig sigref; do
    if [[ $sigref == "$1" ]]; then
      _exit_code=$((128 + sig))
      break
    fi
  done < <(trap -l | tr '\n' '\t' | sed -E 's/\)//g;s/\t\s?/\n/g;s/^\s//')
  echo "$1 received, cleaning up and exiting..."
  removeAllHosts
  exit $_exit_code
}

function runTests() {
  if [[ $_hosts_file == "/etc/hosts" ]]; then
    _hosts_file="h"
  fi
  printf "%s\t%s\n" "127.0.0.1" "localhost" >"$_hosts_file"
  printf "%s\t%s\n" "127.0.0.1" "deadbeeff00d test" >>"$_hosts_file"
  testRemoveHostByCID && {
    cat "$_hosts_file"
    sleep 1
  } || return 1
  testAddHost && {
    cat "$_hosts_file"
    sleep 1
  } || return 1
  testAddHost && {
    cat "$_hosts_file"
    sleep 1
  } || return 1
  testUpdateExistingHost && {
    cat "$_hosts_file"
    sleep 1
  } || return 1
  testRemoveHostByCID && {
    cat "$_hosts_file"
    sleep 1
  } || return 1
  rm -f "$_hosts_file"
  return 0
}

### MAIN

args=("$@")

_hosts_file="/etc/hosts"

if echo "${*}" | grep -q -E "(-f|--hosts-file)(\s+|=)(/)?([^\/\0]+?(/)?)+?(\s(-|--)|$)"; then
  for i in "${!args[@]}"; do
    if [[ "${args[$i]}" == "-f" || "${args[$i]}" == "--hosts-file" ]]; then
      _hosts_file=${args[$i + 1]}
      break
    elif [[ "${args[$i]}" =~ ^(-f|--hosts-file)\=(.+)((\s(-|--))|$) ]]; then
      _hosts_file=${BASH_REMATCH[2]}
    fi
  done
fi

detectEngine

for i in "${!args[@]}"; do
  if [[ "${args[$i]}" == "-a" || "${args[$i]}" == "--add-all-running" ]]; then
    $_fail || {
      addAllHosts
      exit 0
    }
  fi
  if [[ "${args[$i]}" == "-r" || "${args[$i]}" == "--remove-all" ]]; then
    $_fail || {
      removeAllHosts
      exit 0
    }
  fi
  if [[ "${args[$i]}" == "-t" || "${args[$i]}" == "--test" ]]; then
    if runTests; then
      echo "Tests Ok"
      exit 0
    else
      echo "Tests failed"
      exit 1
    fi
  fi
done

if $_fail; then
  exit 1
fi

for s in SIGTERM SIGINT SIGHUP; do
  # shellcheck disable=2064
  trap "_exit $s" "$s"
done

while true; do
  if docker stats --no-stream >/dev/null 2>&1; then
    {
      addAllHosts && listenDockerEvents
    } || true
  else
    sleep 0.3
  fi
done
